import cgi_mod as cgi
import sql_control as sc
from sql_control import sql

from AuthDB import AuthDB
from AuthDB.settings import *
from utility.status import StatusCode, StatusException
from utility.response import setStatusResponse
from utility.json import toJSON

def main(argv = cgi.argv, arge = cgi.arge):
    header = cgi.header()
    header.setContentType('json')

    queries = cgi.data.fromGET()
    cookies = cgi.data.fromCOOKIE()
    response = {}
    status = StatusCode("states.json")

    try:
        auth_db = AuthDB()
        auth_db.log(queries, sc.database.Database.LogLevel.DEBUG)
        
        status.setStatus("0")

        user_id = cookies.get("user_id", 'none')
        user_token = cookies.get("user_token", 'none')
        if not auth_db.verify_account(user_id, user_token):
            raise StatusException(auth_db.last_status)
        
        auth_code = queries.get("auth_id", [None])[0]
        if not auth_db.verify_auth_code(auth_code):
            raise StatusException(auth_db.last_status)

        redirect_url = auth_db.get_redirect_url(auth_code)
        res_token = auth_db.get_resource_token(user_id)

        if belongs_to_domain(redirect_url):
            header.setLocation(redirect_url)
        #elif not bin2bool(auth_db.get_data_by_account(user_id, "Valid_Email")):
        #        status.setStatus("7", ("Email", user_id))
        #        raise StatusException(status)
        else:
            header.setLocation(cgi.build_url(redirect_url, { "user_id": user_id, "res_token": res_token }))
    except StatusException as e:
        status = e.status
    except sql.Error as e:
        status.setStatus("-1", ("Error connecting to the database:" + str(e),))
    except Exception as e:
        status.setStatus("-1", (str(e),))

    header.apply()
    
    response = setStatusResponse(response, status.toDictionary())
    print(toJSON(response))

try:
    main()
except Exception as e:
    with open("error.txt", "w") as f:
        f.write(str(e))
