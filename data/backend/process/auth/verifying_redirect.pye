import cgi_mod as cgi
import sql_control as sc
from sql_control import sql

from AuthDB import AuthDB
from AuthDB.settings import *
from cgi_mod.data import fromPOST, processOptions_CORS
from utility.status import StatusCode, StatusException
from utility.response import setStatusResponse
from utility.json import toJSON, fromJSON

def main(argv = cgi.argv, arge = cgi.arge):
    if processOptions_CORS(get_domain_url(), ["POST"], ["Content-Type"]):
        return

    header = cgi.header()
    header.setContentType('json')

    data = fromJSON(fromPOST())
    response = {}
    status = StatusCode("../states.json")

    try:
        header.setAccessControlAllowOrigin(get_domain_url())
        header.setAccessControlAllowCredentials()
        
        auth_db = AuthDB()
        auth_db.log(data, sc.database.Database.LogLevel.DEBUG)

        redirect_url = data.get("url", get_api_domain_url())

        if not belongs_to_domain(redirect_url):
            status.setStatus("6", (get_domain_url(),))
            raise StatusException(status)

        auth_code = auth_db.generate_auth_code(auth_db.get_default_client().id, redirect_url)
        
        response["data"] = { "auth_url": cgi.build_url(get_domain_url() + '/entry.htm', {"auth_id": auth_code}) }
        status.setStatus("0")
    except StatusException as e:
        status = e.status
    except sql.Error as e:
        status.setStatus("-1", ("Error connecting to the database:" + str(e),))
    except Exception as e:
        status.setStatus("-1", (str(e),))

    header.apply()
    
    response = setStatusResponse(response, status.toDictionary())
    print(toJSON(response))

try:
    main()
except Exception as e:
    with open("error.txt", "w") as f:
        f.write(str(e))
