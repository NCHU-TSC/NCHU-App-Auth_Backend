import google_auth_oauthlib.flow
import os

from AuthDB.settings import *
import cgi_mod as cgi
from utility.response import setStatusResponse
from utility.status import StatusCode
from utility.json import toJSON

def main(argv = cgi.argv, arge = cgi.arge):
    header = cgi.header()
    header.setContentType('json')

    data = cgi.data.fromGET()
    response = {}
    status = StatusCode("states.json")

    try:
        # Required, call the from_client_secrets_file method to retrieve the client ID from a
        # client_secret.json file. The client ID (from that file) and access scopes are required. (You can
        # also use the from_client_config method, which passes the client configuration as it originally
        # appeared in a client secrets file but doesn't access the file itself.)
        flow = google_auth_oauthlib.flow.Flow.from_client_secrets_file(
            os.getenv('GOOGLE_OAUTH_CONFIG'),
            scopes=['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']
        )

        # Required, indicate where the API server will redirect the user after the user completes
        # the authorization flow. The redirect URI is required. The value must exactly
        # match one of the authorized redirect URIs for the OAuth 2.0 client, which you
        # configured in the API Console. If this value doesn't match an authorized URI,
        # you will get a 'redirect_uri_mismatch' error.
        flow.redirect_uri = f'{ get_api_domain_url() }/auth/google/callback.pye'

        # Required, generate the URL to request access from the Google user. The state parameter is
        # optional, and the prompt parameter is optional. The state parameter is a string that the
        # authorization server will return in the response, and the prompt parameter is a string that
        # specifies whether the user should be prompted to reauthorize the application. The prompt
        # parameter is optional and defaults to 'consent'.
        authorization_url, __state = flow.authorization_url(prompt='consent', state=data.get('auth_id', ['none'])[0])
        header.setLocation(authorization_url)

        status.setStatus("0")
    except Exception as e:
        status.setStatus("-1", (str(e),))

    header.apply()
    response = setStatusResponse(response, status.toDictionary())
    print(toJSON(response))

try:
    main()
except Exception as e:
    with open("error.txt", "w") as f:
        f.write(str(e))
