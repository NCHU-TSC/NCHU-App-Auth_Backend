import cgi_mod as cgi
import sql_control as sc
from sql_control import sql

from AuthDB import AuthDB
from AuthDB.settings import *
from utility.json import toJSON, fromJSON
from utility.status import StatusCode, StatusException
from utility.response import setStatusResponse
from utility import bin2bool

def main(argv = cgi.argv, arge = cgi.arge):
    header = cgi.header()
    header.setContentType('json')
    
    data = fromJSON(cgi.data.fromPOST())
    response = {}
    status = StatusCode("../states.json")

    try:
        auth_db = AuthDB()
        auth_db.log(data, sc.database.Database.LogLevel.DEBUG)
        
        client_id = data.get("id")
        client_token = data.get("token")
        user_id = data.get("user_id")
        res_token = data.get("res_token")

        auth_db.verify_client(client_id, client_token)
        if auth_db.last_status.code == "1":
            raise StatusException(auth_db.last_status)

        if auth_db.get_data_by_client(client_id, "State") != "Approved":
            status.setStatus("3", (client_id,))
            raise StatusException(status)
        
        if auth_db.get_data_by_account(user_id, 'Resource_Token') != res_token:
            status.setStatus("4")
            raise StatusException(status)
        
        response["data"] = {
            "Login_ID": auth_db.get_data_by_account(user_id, "Login_ID"),
            "Name": auth_db.get_data_by_account(user_id, "Name"),
            "Email": auth_db.get_data_by_account(user_id, "Email"),
            "Valid_Email": bin2bool(auth_db.get_data_by_account(user_id, "Valid_Email")),
            "Gender": auth_db.get_data_by_account(user_id, "Gender"),
            "Department": auth_db.get_data_by_account(user_id, "Department"),
            "Grade": auth_db.get_data_by_account(user_id, "Grade"),
            "Photo": auth_db.get_data_by_account(user_id, "Photo")
        }

        status.setStatus("0")
    except StatusException as e:
        status = e.status
    except sql.Error as e:
        status.setStatus("-1", ("Error connecting to the database:" + str(e),))
    except Exception as e:
        status.setStatus("-1", (str(e),))
    
    header.apply()

    response = setStatusResponse(response, status.toDictionary())
    print(toJSON(response))

try:
    main()
except Exception as e:
    with open("error.txt", "w") as f:
        f.write(str(e))
